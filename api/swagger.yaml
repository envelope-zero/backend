definitions:
  controllers.Account:
    properties:
      balance:
        example: 2735.17
        type: number
      budgetId:
        example: 550dc009-cea6-4c12-b2a5-03446eb7b7cf
        type: string
      createdAt:
        example: "2022-04-02T19:28:44.491514Z"
        type: string
      deletedAt:
        example: "2022-04-22T21:01:05.058161Z"
        type: string
      external:
        default: false
        example: false
        type: boolean
      id:
        example: 65392deb-5e92-4268-b114-297faad6cdce
        type: string
      links:
        $ref: '#/definitions/controllers.AccountLinks'
      name:
        example: Cash
        type: string
      note:
        example: Money in my wallet
        type: string
      onBudget:
        default: false
        description: 'Always false when external: true'
        example: true
        type: boolean
      reconciledBalance:
        example: 2539.57
        type: number
      updatedAt:
        example: "2022-04-17T20:14:01.048145Z"
        type: string
    type: object
  controllers.AccountLinks:
    properties:
      self:
        example: https://example.com/api/v1/accounts/af892e10-7e0a-4fb8-b1bc-4b6d88401ed2
        type: string
      transactions:
        example: https://example.com/api/v1/transactions?account=af892e10-7e0a-4fb8-b1bc-4b6d88401ed2
        type: string
    type: object
  controllers.AccountListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/controllers.Account'
        type: array
    type: object
  controllers.AccountResponse:
    properties:
      data:
        $ref: '#/definitions/controllers.Account'
    type: object
  controllers.Allocation:
    properties:
      amount:
        description: The maximum value is "999999999999.99999999", swagger unfortunately
          rounds this.
        example: 22.01
        maximum: 1000000000000
        minimum: 1e-08
        multipleOf: 1e-08
        type: number
      createdAt:
        example: "2022-04-02T19:28:44.491514Z"
        type: string
      deletedAt:
        example: "2022-04-22T21:01:05.058161Z"
        type: string
      envelopeId:
        example: a0909e84-e8f9-4cb6-82a5-025dff105ff2
        type: string
      id:
        example: 65392deb-5e92-4268-b114-297faad6cdce
        type: string
      links:
        $ref: '#/definitions/controllers.AllocationLinks'
      month:
        description: Only year and month of this timestamp are used, everything else
          is ignored. This will always be set to 00:00 UTC on the first of the specified
          month
        example: "2021-12-01T00:00:00.000000Z"
        type: string
      updatedAt:
        example: "2022-04-17T20:14:01.048145Z"
        type: string
    type: object
  controllers.AllocationLinks:
    properties:
      self:
        example: https://example.com/api/v1/allocations/902cd93c-3724-4e46-8540-d014131282fc
        type: string
    type: object
  controllers.AllocationListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/controllers.Allocation'
        type: array
    type: object
  controllers.AllocationResponse:
    properties:
      data:
        $ref: '#/definitions/controllers.Allocation'
    type: object
  controllers.Budget:
    properties:
      balance:
        example: 3423.42
        type: number
      createdAt:
        example: "2022-04-02T19:28:44.491514Z"
        type: string
      currency:
        example: â‚¬
        type: string
      deletedAt:
        example: "2022-04-22T21:01:05.058161Z"
        type: string
      id:
        example: 65392deb-5e92-4268-b114-297faad6cdce
        type: string
      links:
        $ref: '#/definitions/controllers.BudgetLinks'
      name:
        example: Morre's Budget
        type: string
      note:
        example: My personal expenses
        type: string
      updatedAt:
        example: "2022-04-17T20:14:01.048145Z"
        type: string
    type: object
  controllers.BudgetAllocationMode:
    properties:
      mode:
        example: ALLOCATE_LAST_MONTH_SPEND
        type: string
    type: object
  controllers.BudgetLinks:
    properties:
      accounts:
        example: https://example.com/api/v1/accounts?budget=550dc009-cea6-4c12-b2a5-03446eb7b7cf
        type: string
      categories:
        example: https://example.com/api/v1/categories?budget=550dc009-cea6-4c12-b2a5-03446eb7b7cf
        type: string
      envelopes:
        example: https://example.com/api/v1/envelopes?budget=550dc009-cea6-4c12-b2a5-03446eb7b7cf
        type: string
      month:
        description: This 'YYYY-MM' for clients to replace with the actual year and
          month.
        example: https://example.com/api/v1/budgets/550dc009-cea6-4c12-b2a5-03446eb7b7cf/YYYY-MM
        type: string
      monthAllocations:
        description: This uses 'YYYY-MM' for clients to replace with the actual year
          and month.
        example: https://example.com/api/v1/budgets/550dc009-cea6-4c12-b2a5-03446eb7b7cf/YYYY-MM/allocations
        type: string
      self:
        example: https://example.com/api/v1/budgets/550dc009-cea6-4c12-b2a5-03446eb7b7cf
        type: string
      transactions:
        example: https://example.com/api/v1/transactions?budget=550dc009-cea6-4c12-b2a5-03446eb7b7cf
        type: string
    type: object
  controllers.BudgetListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/controllers.Budget'
        type: array
    type: object
  controllers.BudgetMonthResponse:
    properties:
      data:
        $ref: '#/definitions/models.BudgetMonth'
    type: object
  controllers.BudgetResponse:
    properties:
      data:
        $ref: '#/definitions/controllers.Budget'
    type: object
  controllers.Category:
    properties:
      budgetId:
        example: 52d967d3-33f4-4b04-9ba7-772e5ab9d0ce
        type: string
      createdAt:
        example: "2022-04-02T19:28:44.491514Z"
        type: string
      deletedAt:
        example: "2022-04-22T21:01:05.058161Z"
        type: string
      envelopes:
        items:
          $ref: '#/definitions/controllers.Envelope'
        type: array
      id:
        example: 65392deb-5e92-4268-b114-297faad6cdce
        type: string
      links:
        $ref: '#/definitions/controllers.CategoryLinks'
      name:
        example: Saving
        type: string
      note:
        example: All envelopes for long-term saving
        type: string
      updatedAt:
        example: "2022-04-17T20:14:01.048145Z"
        type: string
    type: object
  controllers.CategoryLinks:
    properties:
      envelopes:
        example: https://example.com/api/v1/envelopes?category=3b1ea324-d438-4419-882a-2fc91d71772f
        type: string
      self:
        example: https://example.com/api/v1/categories/3b1ea324-d438-4419-882a-2fc91d71772f
        type: string
    type: object
  controllers.CategoryListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/controllers.Category'
        type: array
    type: object
  controllers.CategoryResponse:
    properties:
      data:
        $ref: '#/definitions/controllers.Category'
    type: object
  controllers.Envelope:
    properties:
      categoryId:
        example: 878c831f-af99-4a71-b3ca-80deb7d793c1
        type: string
      createdAt:
        example: "2022-04-02T19:28:44.491514Z"
        type: string
      deletedAt:
        example: "2022-04-22T21:01:05.058161Z"
        type: string
      id:
        example: 65392deb-5e92-4268-b114-297faad6cdce
        type: string
      links:
        $ref: '#/definitions/controllers.EnvelopeLinks'
      name:
        example: Groceries
        type: string
      note:
        example: For stuff bought at supermarkets and drugstores
        type: string
      updatedAt:
        example: "2022-04-17T20:14:01.048145Z"
        type: string
    type: object
  controllers.EnvelopeLinks:
    properties:
      allocations:
        example: https://example.com/api/v1/allocations?envelope=45b6b5b9-f746-4ae9-b77b-7688b91f8166
        type: string
      month:
        description: This will always end in 'YYYY-MM' for clients to use replace
          with actual numbers.
        example: https://example.com/api/v1/envelopes/45b6b5b9-f746-4ae9-b77b-7688b91f8166/YYYY-MM
        type: string
      self:
        example: https://example.com/api/v1/envelopes/45b6b5b9-f746-4ae9-b77b-7688b91f8166
        type: string
      transactions:
        example: https://example.com/api/v1/transactions?envelope=45b6b5b9-f746-4ae9-b77b-7688b91f8166
        type: string
    type: object
  controllers.EnvelopeListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/controllers.Envelope'
        type: array
    type: object
  controllers.EnvelopeMonthResponse:
    properties:
      data:
        $ref: '#/definitions/models.EnvelopeMonth'
    type: object
  controllers.EnvelopeResponse:
    properties:
      data:
        $ref: '#/definitions/controllers.Envelope'
    type: object
  controllers.Transaction:
    properties:
      amount:
        description: The maximum value is "999999999999.99999999", swagger unfortunately
          rounds this.
        example: 14.03
        maximum: 1000000000000
        minimum: 1e-08
        multipleOf: 1e-08
        type: number
      budgetId:
        example: 55eecbd8-7c46-4b06-ada9-f287802fb05e
        type: string
      createdAt:
        example: "2022-04-02T19:28:44.491514Z"
        type: string
      date:
        example: "1815-12-10T18:43:00.271152Z"
        type: string
      deletedAt:
        example: "2022-04-22T21:01:05.058161Z"
        type: string
      destinationAccountId:
        example: 8e16b456-a719-48ce-9fec-e115cfa7cbcc
        type: string
      envelopeId:
        example: 2649c965-7999-4873-ae16-89d5d5fa972e
        type: string
      id:
        example: 65392deb-5e92-4268-b114-297faad6cdce
        type: string
      links:
        $ref: '#/definitions/controllers.TransactionLinks'
      note:
        example: Lunch
        type: string
      reconciled:
        default: false
        example: true
        type: boolean
      sourceAccountId:
        example: fd81dc45-a3a2-468e-a6fa-b2618f30aa45
        type: string
      updatedAt:
        example: "2022-04-17T20:14:01.048145Z"
        type: string
    type: object
  controllers.TransactionLinks:
    properties:
      self:
        example: https://example.com/api/v1/transactions/d430d7c3-d14c-4712-9336-ee56965a6673
        type: string
    type: object
  controllers.TransactionListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/controllers.Transaction'
        type: array
    type: object
  controllers.TransactionResponse:
    properties:
      data:
        $ref: '#/definitions/controllers.Transaction'
    type: object
  httperrors.HTTPError:
    properties:
      error:
        example: An ID specified in the query string was not a valid uint64
        type: string
    type: object
  models.AccountCreate:
    properties:
      budgetId:
        example: 550dc009-cea6-4c12-b2a5-03446eb7b7cf
        type: string
      external:
        default: false
        example: false
        type: boolean
      name:
        example: Cash
        type: string
      note:
        example: Money in my wallet
        type: string
      onBudget:
        default: false
        description: 'Always false when external: true'
        example: true
        type: boolean
    type: object
  models.AllocationCreate:
    properties:
      amount:
        description: The maximum value is "999999999999.99999999", swagger unfortunately
          rounds this.
        example: 22.01
        maximum: 1000000000000
        minimum: 1e-08
        multipleOf: 1e-08
        type: number
      envelopeId:
        example: a0909e84-e8f9-4cb6-82a5-025dff105ff2
        type: string
      month:
        description: Only year and month of this timestamp are used, everything else
          is ignored. This will always be set to 00:00 UTC on the first of the specified
          month
        example: "2021-12-01T00:00:00.000000Z"
        type: string
    type: object
  models.BudgetCreate:
    properties:
      currency:
        example: â‚¬
        type: string
      name:
        example: Morre's Budget
        type: string
      note:
        example: My personal expenses
        type: string
    type: object
  models.BudgetMonth:
    properties:
      budgeted:
        example: 2100
        type: number
      envelopes:
        items:
          $ref: '#/definitions/models.EnvelopeMonth'
        type: array
      id:
        description: The ID of the Envelope
        example: 1e777d24-3f5b-4c43-8000-04f65f895578
        type: string
      income:
        example: 2317.34
        type: number
      month:
        description: This is always set to 00:00 UTC on the first of the month.
        example: "2006-05-01T00:00:00.000000Z"
        type: string
      name:
        description: The name of the Envelope
        example: Groceries
        type: string
    type: object
  models.CategoryCreate:
    properties:
      budgetId:
        example: 52d967d3-33f4-4b04-9ba7-772e5ab9d0ce
        type: string
      name:
        example: Saving
        type: string
      note:
        example: All envelopes for long-term saving
        type: string
    type: object
  models.EnvelopeCreate:
    properties:
      categoryId:
        example: 878c831f-af99-4a71-b3ca-80deb7d793c1
        type: string
      name:
        example: Groceries
        type: string
      note:
        example: For stuff bought at supermarkets and drugstores
        type: string
    type: object
  models.EnvelopeMonth:
    properties:
      allocation:
        example: 85.44
        type: number
      balance:
        example: 12.32
        type: number
      id:
        description: The ID of the Envelope
        example: 10b9705d-3356-459e-9d5a-28d42a6c4547
        type: string
      month:
        description: This is always set to 00:00 UTC on the first of the month.
        example: "1969-06-01T00:00:00.000000Z"
        type: string
      name:
        description: The name of the Envelope
        example: Groceries
        type: string
      spent:
        example: 73.12
        type: number
    type: object
  models.TransactionCreate:
    properties:
      amount:
        description: The maximum value is "999999999999.99999999", swagger unfortunately
          rounds this.
        example: 14.03
        maximum: 1000000000000
        minimum: 1e-08
        multipleOf: 1e-08
        type: number
      budgetId:
        example: 55eecbd8-7c46-4b06-ada9-f287802fb05e
        type: string
      date:
        example: "1815-12-10T18:43:00.271152Z"
        type: string
      destinationAccountId:
        example: 8e16b456-a719-48ce-9fec-e115cfa7cbcc
        type: string
      envelopeId:
        example: 2649c965-7999-4873-ae16-89d5d5fa972e
        type: string
      note:
        example: Lunch
        type: string
      reconciled:
        default: false
        example: true
        type: boolean
      sourceAccountId:
        example: fd81dc45-a3a2-468e-a6fa-b2618f30aa45
        type: string
    type: object
  router.RootLinks:
    properties:
      docs:
        example: https://example.com/api/docs/index.html
        type: string
      v1:
        example: https://example.com/api/v1
        type: string
      version:
        example: https://example.com/api/version
        type: string
    type: object
  router.RootResponse:
    properties:
      links:
        $ref: '#/definitions/router.RootLinks'
    type: object
  router.V1Links:
    properties:
      accounts:
        example: https://example.com/api/v1/accounts
        type: string
      allocations:
        example: https://example.com/api/v1/allocations
        type: string
      budgets:
        example: https://example.com/api/v1/budgets
        type: string
      categories:
        example: https://example.com/api/v1/categories
        type: string
      envelopes:
        example: https://example.com/api/v1/envelopes
        type: string
      transactions:
        example: https://example.com/api/v1/transactions
        type: string
    type: object
  router.V1Response:
    properties:
      links:
        $ref: '#/definitions/router.V1Links'
    type: object
  router.VersionObject:
    properties:
      version:
        example: 1.1.0
        type: string
    type: object
  router.VersionResponse:
    properties:
      data:
        $ref: '#/definitions/router.VersionObject'
    type: object
info:
  contact: {}
paths:
  /:
    get:
      description: Entrypoint for the API, listing all endpoints
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.RootResponse'
      summary: API root
      tags:
      - General
    options:
      description: Returns an empty response with the HTTP Header "allow" set to the
        allowed HTTP verbs
      responses:
        "204":
          description: No Content
      summary: Allowed HTTP verbs
      tags:
      - General
  /v1:
    delete:
      description: Permanently deletes all resources
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Delete everything
      tags:
      - v1
    get:
      description: Returns general information about the v1 API
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.V1Response'
      summary: v1 API
      tags:
      - v1
    options:
      description: Returns an empty response with the HTTP Header "allow" set to the
        allowed HTTP verbs
      responses:
        "204":
          description: No Content
      summary: Allowed HTTP verbs
      tags:
      - v1
  /v1/accounts:
    get:
      description: Returns a list of accounts
      parameters:
      - description: Filter by name
        in: query
        name: name
        type: string
      - description: Filter by note
        in: query
        name: note
        type: string
      - description: Filter by budget ID
        in: query
        name: budget
        type: string
      - description: Filter by on/off-budget
        in: query
        name: onBudget
        type: boolean
      - description: Filter internal/external
        in: query
        name: external
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.AccountListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: List accounts
      tags:
      - Accounts
    options:
      description: Returns an empty response with the HTTP Header "allow" set to the
        allowed HTTP verbs
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
      summary: Allowed HTTP verbs
      tags:
      - Accounts
    post:
      description: Creates a new account
      parameters:
      - description: Account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/models.AccountCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.AccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Create account
      tags:
      - Accounts
  /v1/accounts/{accountId}:
    delete:
      description: Deletes an account
      parameters:
      - description: ID formatted as string
        in: path
        name: accountId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Delete account
      tags:
      - Accounts
    get:
      description: Returns a specific account
      parameters:
      - description: ID formatted as string
        in: path
        name: accountId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.AccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Get account
      tags:
      - Accounts
    options:
      description: Returns an empty response with the HTTP Header "allow" set to the
        allowed HTTP verbs
      parameters:
      - description: ID formatted as string
        in: path
        name: accountId
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
      summary: Allowed HTTP verbs
      tags:
      - Accounts
    patch:
      description: Updates an account. Only values to be updated need to be specified.
      parameters:
      - description: ID formatted as string
        in: path
        name: accountId
        required: true
        type: string
      - description: Account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/models.AccountCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.AccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Update account
      tags:
      - Accounts
  /v1/allocations:
    get:
      description: Returns a list of allocations
      parameters:
      - description: Filter by month
        in: query
        name: month
        type: string
      - description: Filter by amount
        in: query
        name: amount
        type: string
      - description: Filter by envelope ID
        in: query
        name: envelope
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.AllocationListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Get allocations
      tags:
      - Allocations
    options:
      description: Returns an empty response with the HTTP Header "allow" set to the
        allowed HTTP verbs
      responses:
        "204":
          description: No Content
      summary: Allowed HTTP verbs
      tags:
      - Allocations
    post:
      description: Create a new allocation of funds to an envelope for a specific
        month
      parameters:
      - description: Allocation
        in: body
        name: allocation
        required: true
        schema:
          $ref: '#/definitions/models.AllocationCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.AllocationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Create allocations
      tags:
      - Allocations
  /v1/allocations/{allocationId}:
    delete:
      description: Deletes an allocation
      parameters:
      - description: ID formatted as string
        in: path
        name: allocationId
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Delete allocation
      tags:
      - Allocations
    get:
      description: Returns a specific allocation
      parameters:
      - description: ID formatted as string
        in: path
        name: allocationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.AllocationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Get allocation
      tags:
      - Allocations
    options:
      description: Returns an empty response with the HTTP Header "allow" set to the
        allowed HTTP verbs
      parameters:
      - description: ID formatted as string
        in: path
        name: allocationId
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Allowed HTTP verbs
      tags:
      - Allocations
    patch:
      consumes:
      - application/json
      description: Update an allocation. Only values to be updated need to be specified.
      parameters:
      - description: ID formatted as string
        in: path
        name: allocationId
        required: true
        type: string
      - description: Allocation
        in: body
        name: allocation
        required: true
        schema:
          $ref: '#/definitions/models.AllocationCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.AllocationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Update allocation
      tags:
      - Allocations
  /v1/budgets:
    get:
      description: Returns a list of budgets
      parameters:
      - description: Filter by name
        in: query
        name: name
        type: string
      - description: Filter by note
        in: query
        name: note
        type: string
      - description: Filter by currency
        in: query
        name: currency
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.BudgetListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: List budgets
      tags:
      - Budgets
    options:
      description: Returns an empty response with the HTTP Header "allow" set to the
        allowed HTTP verbs
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Allowed HTTP verbs
      tags:
      - Budgets
    post:
      consumes:
      - application/json
      description: Creates a new budget
      parameters:
      - description: Budget
        in: body
        name: budget
        required: true
        schema:
          $ref: '#/definitions/models.BudgetCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.BudgetResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Create budget
      tags:
      - Budgets
  /v1/budgets/{budgetId}:
    delete:
      description: Deletes a budget
      parameters:
      - description: ID formatted as string
        in: path
        name: budgetId
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Delete budget
      tags:
      - Budgets
    get:
      description: Returns a specific budget
      parameters:
      - description: ID formatted as string
        in: path
        name: budgetId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.BudgetResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Get budget
      tags:
      - Budgets
    options:
      description: Returns an empty response with the HTTP Header "allow" set to the
        allowed HTTP verbs
      parameters:
      - description: ID formatted as string
        in: path
        name: budgetId
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Allowed HTTP verbs
      tags:
      - Budgets
    patch:
      consumes:
      - application/json
      description: Update an existing budget. Only values to be updated need to be
        specified.
      parameters:
      - description: ID formatted as string
        in: path
        name: budgetId
        required: true
        type: string
      - description: Budget
        in: body
        name: budget
        required: true
        schema:
          $ref: '#/definitions/models.BudgetCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.BudgetResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Update budget
      tags:
      - Budgets
  /v1/budgets/{budgetId}/{month}:
    get:
      description: Returns data about a budget for a for a specific month
      parameters:
      - description: ID formatted as string
        in: path
        name: budgetId
        required: true
        type: string
      - description: The month in YYYY-MM format
        in: path
        name: month
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.BudgetMonthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Get Budget month data
      tags:
      - Budgets
    options:
      description: Returns an empty response with the HTTP Header "allow" set to the
        allowed HTTP verbs
      parameters:
      - description: ID formatted as string
        in: path
        name: budgetId
        required: true
        type: string
      - description: The month in YYYY-MM format
        in: path
        name: month
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Allowed HTTP verbs
      tags:
      - Budgets
  /v1/budgets/{budgetId}/{month}/allocations:
    delete:
      description: Deletes all allocation for the specified month
      parameters:
      - description: The month in YYYY-MM format
        in: path
        name: month
        required: true
        type: string
      - description: Budget ID formatted as string
        in: path
        name: budgetId
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Delete allocations for a month
      tags:
      - Budgets
    options:
      description: Returns an empty response with the HTTP Header "allow" set to the
        allowed HTTP verbs
      parameters:
      - description: ID formatted as string
        in: path
        name: budgetId
        required: true
        type: string
      - description: The month in YYYY-MM format
        in: path
        name: month
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Allowed HTTP verbs
      tags:
      - Budgets
    post:
      description: Sets allocations for a month for all envelopes that do not have
        an allocation yet
      parameters:
      - description: The month in YYYY-MM format
        in: path
        name: month
        required: true
        type: string
      - description: Budget ID formatted as string
        in: path
        name: budgetId
        required: true
        type: string
      - description: Budget
        in: body
        name: mode
        required: true
        schema:
          $ref: '#/definitions/controllers.BudgetAllocationMode'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Set allocations for a month
      tags:
      - Budgets
  /v1/categories:
    get:
      description: Returns a list of categories
      parameters:
      - description: Filter by name
        in: query
        name: name
        type: string
      - description: Filter by note
        in: query
        name: note
        type: string
      - description: Filter by budget ID
        in: query
        name: budget
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.CategoryListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Get categories
      tags:
      - Categories
    options:
      description: Returns an empty response with the HTTP Header "allow" set to the
        allowed HTTP verbs
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
      summary: Allowed HTTP verbs
      tags:
      - Categories
    post:
      description: Creates a new category
      parameters:
      - description: Category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.CategoryCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Create category
      tags:
      - Categories
  /v1/categories/{categoryId}:
    delete:
      description: Deletes a category
      parameters:
      - description: ID formatted as string
        in: path
        name: categoryId
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Delete category
      tags:
      - Categories
    get:
      description: Returns a specific category
      parameters:
      - description: ID formatted as string
        in: path
        name: categoryId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Get category
      tags:
      - Categories
    options:
      description: Returns an empty response with the HTTP Header "allow" set to the
        allowed HTTP verbs
      parameters:
      - description: ID formatted as string
        in: path
        name: categoryId
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
      summary: Allowed HTTP verbs
      tags:
      - Categories
    patch:
      consumes:
      - application/json
      description: Update an existing category. Only values to be updated need to
        be specified.
      parameters:
      - description: ID formatted as string
        in: path
        name: categoryId
        required: true
        type: string
      - description: Category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.CategoryCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Update category
      tags:
      - Categories
  /v1/envelopes:
    get:
      description: Returns a list of envelopes
      parameters:
      - description: Filter by name
        in: query
        name: name
        type: string
      - description: Filter by note
        in: query
        name: note
        type: string
      - description: Filter by category ID
        in: query
        name: category
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.EnvelopeListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Get envelopes
      tags:
      - Envelopes
    options:
      description: Returns an empty response with the HTTP Header "allow" set to the
        allowed HTTP verbs
      responses:
        "204":
          description: No Content
      summary: Allowed HTTP verbs
      tags:
      - Envelopes
    post:
      description: Creates a new envelope
      parameters:
      - description: Envelope
        in: body
        name: envelope
        required: true
        schema:
          $ref: '#/definitions/models.EnvelopeCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.EnvelopeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Create envelope
      tags:
      - Envelopes
  /v1/envelopes/{envelopeId}:
    delete:
      description: Deletes an envelope
      parameters:
      - description: ID formatted as string
        in: path
        name: envelopeId
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Delete envelope
      tags:
      - Envelopes
    get:
      description: Returns a specific envelope
      parameters:
      - description: ID formatted as string
        in: path
        name: envelopeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.EnvelopeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Get envelope
      tags:
      - Envelopes
    options:
      description: Returns an empty response with the HTTP Header "allow" set to the
        allowed HTTP verbs
      parameters:
      - description: ID formatted as string
        in: path
        name: envelopeId
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Allowed HTTP verbs
      tags:
      - Envelopes
    patch:
      consumes:
      - application/json
      description: Updates an existing envelope. Only values to be updated need to
        be specified.
      parameters:
      - description: ID formatted as string
        in: path
        name: envelopeId
        required: true
        type: string
      - description: Envelope
        in: body
        name: envelope
        required: true
        schema:
          $ref: '#/definitions/models.EnvelopeCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.EnvelopeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Update envelope
      tags:
      - Envelopes
  /v1/envelopes/{envelopeId}/{month}:
    get:
      description: Returns data about an envelope for a for a specific month
      parameters:
      - description: ID formatted as string
        in: path
        name: envelopeId
        required: true
        type: string
      - description: The month in YYYY-MM format
        in: path
        name: month
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.EnvelopeMonthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Get Envelope month data
      tags:
      - Envelopes
  /v1/transactions:
    get:
      description: Returns a list of transactions
      parameters:
      - description: Filter by note
        in: query
        name: note
        type: string
      - description: Filter by budget ID
        in: query
        name: budget
        type: string
      - description: Filter by ID of associated account, regardeless of source or
          destination
        in: query
        name: account
        type: string
      - description: Filter by source account ID
        in: query
        name: source
        type: string
      - description: Filter by destination account ID
        in: query
        name: destination
        type: string
      - description: Filter by envelope ID
        in: query
        name: envelope
        type: string
      - description: Filter by reconcilication state
        in: query
        name: reconciled
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.TransactionListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Get transactions
      tags:
      - Transactions
    options:
      description: Returns an empty response with the HTTP Header "allow" set to the
        allowed HTTP verbs
      responses:
        "204":
          description: No Content
      summary: Allowed HTTP verbs
      tags:
      - Transactions
    post:
      description: Creates a new transaction
      parameters:
      - description: Transaction
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/models.TransactionCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.TransactionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Create transaction
      tags:
      - Transactions
  /v1/transactions/{transactionId}:
    delete:
      description: Deletes a transaction
      parameters:
      - description: ID formatted as string
        in: path
        name: transactionId
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Delete transaction
      tags:
      - Transactions
    get:
      description: Returns a specific transaction
      parameters:
      - description: ID formatted as string
        in: path
        name: transactionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.TransactionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Get transaction
      tags:
      - Transactions
    options:
      description: Returns an empty response with the HTTP Header "allow" set to the
        allowed HTTP verbs
      parameters:
      - description: ID formatted as string
        in: path
        name: transactionId
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Allowed HTTP verbs
      tags:
      - Transactions
    patch:
      consumes:
      - application/json
      description: Updates an existing transaction. Only values to be updated need
        to be specified.
      parameters:
      - description: ID formatted as string
        in: path
        name: transactionId
        required: true
        type: string
      - description: Transaction
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/models.TransactionCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.TransactionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperrors.HTTPError'
      summary: Update transaction
      tags:
      - Transactions
  /version:
    get:
      description: Returns the software version of the API
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.VersionResponse'
      summary: API version
      tags:
      - General
    options:
      description: Returns an empty response with the HTTP Header "allow" set to the
        allowed HTTP verbs
      responses:
        "204":
          description: No Content
      summary: Allowed HTTP verbs
      tags:
      - General
swagger: "2.0"
